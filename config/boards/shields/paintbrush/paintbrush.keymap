#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// ARTS Row
#define KEY_A 4
#define KEY_R 5
#define KEY_T 6
#define KEY_S 7
// EYIO Row
#define KEY_E 12
#define KEY_Y 13
#define KEY_I 14
#define KEY_O 15

//#define TIME_2 175
#define TIME_2 75
#define TIME_3 175
#define TIME_4 175
#define TIMEOUT_LAYER_HOLD 200
#define TIMEOUT_STICKY_LEADER_KEY 5000

&sk {
	release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
    quick-release;
};
&sl { 
	release-after-ms = <TIMEOUT_STICKY_LEADER_KEY>;
};
 

#define L_BA 0
#define L_NU 1
#define L_SY 2
#define L_PA 3
#define L_NA 4
#define L_BT 5
#define L_CU 6

/ {
	combos {
		compatible = "zmk,combos";
		/*****************************************
		 * Left//ARDUX combos
		 *****************************************/
		/*****************************************
		 * 2 key combos
		 *****************************************/

	combo_enter      { timeout-ms = <TIME_2>; key-positions = <KEY_S KEY_O>; bindings = <&kp ENTER>; };
	combo_spc        { timeout-ms = <TIME_2>; key-positions = <KEY_A KEY_E>; bindings = <&space_mod>; };
	combo_escape     { timeout-ms = <TIME_2>; key-positions = <KEY_R KEY_Y>; bindings = <&kp ESC>; };
	combo_control    { timeout-ms = <TIME_2>; key-positions = <KEY_E KEY_S>; bindings = <&sk LCTRL>; };
	combo_gui        { timeout-ms = <TIME_2>; key-positions = <KEY_Y KEY_S>; bindings = <&sk LGUI>; };
	combo_alt        { timeout-ms = <TIME_2>; key-positions = <KEY_I KEY_S>; bindings = <&sk LALT>; };
	combo_ralt       { timeout-ms = <TIME_2>; key-positions = <KEY_I KEY_O>; bindings = <&sk RALT>; };
	combo_backspace  { timeout-ms = <TIME_2>; key-positions = <KEY_E KEY_R>; bindings = <&kp BACKSPACE>; };
	combo_delete     { timeout-ms = <TIME_2>; key-positions = <KEY_I KEY_R>; bindings = <&kp DELETE>; };
	combo_shift_lock { timeout-ms = <TIME_2>; key-positions = <KEY_R KEY_Y>; bindings = <&kt LSHFT>; };

	combo_b           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_E KEY_O>; bindings = <&kp B>; };
	combo_c           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_E KEY_Y>; bindings = <&kp C>; };
	combo_y           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_I KEY_O>; bindings = <&kp Y>; };
	combo_f           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_A KEY_R>; bindings = <&kp F>; };
	combo_g           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_R KEY_T>; bindings = <&kp G>; };
	combo_u           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_Y KEY_I>; bindings = <&kp N>; };
	combo_h           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_E KEY_I>; bindings = <&kp H>; };
	combo_v           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_R KEY_S>; bindings = <&kp V>; };
	combo_j           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_T KEY_S>; bindings = <&kp J>; };
	combo_w           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_A KEY_S>; bindings = <&kp W>; };
	combo_k           { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_Y KEY_O>; bindings = <&kp K>; };
	combo_period     { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_A KEY_Y>; bindings = <&kp PERIOD>; };
	combo_comma       { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_E KEY_T>; bindings = <&kp COMMA>; };
	combo_slash       { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_A KEY_O>; bindings = <&kp SLASH>; };
	combo_exclamation { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <KEY_T KEY_I>; bindings = <&kp EXCL>; };
	
	combo_seven { layers = <L_NU>; timeout-ms = <TIME_2>; key-positions = <KEY_A KEY_R>; bindings = <&kp N7>; };
	combo_eight { layers = <L_NU>; timeout-ms = <TIME_2>; key-positions = <KEY_R KEY_T>; bindings = <&kp N8>; };
	combo_nine  { layers = <L_NU>; timeout-ms = <TIME_2>; key-positions = <KEY_E KEY_Y>; bindings = <&kp N9>; };
	combo_zero  { layers = <L_NU>; timeout-ms = <TIME_2>; key-positions = <KEY_Y KEY_I>; bindings = <&kp N0>; };

		/*****************************************
		 * 3 key combos
		 *****************************************/
	combo_esc              { timeout-ms = <TIME_3>; key-positions = <KEY_A KEY_R KEY_O>; bindings = <&kp ESC>; };
	combo_layer_navigation { timeout-ms = <TIME_3>; key-positions = <KEY_R KEY_E KEY_I>; bindings = <&tog L_NA>; };

	comboi_m           { layers = <L_BA>; timeout-ms = <TIME_3>; key-positions = <KEY_Y KEY_I KEY_O>; bindings = <&kp M>; };
	combo_d            { layers = <L_BA>; timeout-ms = <TIME_3>; key-positions = <KEY_A KEY_R KEY_T>; bindings = <&kp D>; };
	combo_p            { layers = <L_BA>; timeout-ms = <TIME_3>; key-positions = <KEY_E KEY_I KEY_O>; bindings = <&kp P>; };
	combo_q            { layers = <L_BA>; timeout-ms = <TIME_3>; key-positions = <KEY_A KEY_T KEY_S>; bindings = <&kp Q>; };
	combo_x            { layers = <L_BA>; timeout-ms = <TIME_3>; key-positions = <KEY_R KEY_T KEY_S>; bindings = <&kp X>; };
	combo_l            { layers = <L_BA>; timeout-ms = <TIME_3>; key-positions = <KEY_E KEY_Y KEY_I>; bindings = <&kp L>; };
	combo_single_quote { layers = <L_BA>; timeout-ms = <TIME_3>; key-positions = <KEY_A KEY_Y KEY_I>; bindings = <&kp SQT>; };
		
		/*****************************************
		 * 4 key combos
		 *****************************************/
	combo_tab             { timeout-ms = <TIME_4>; key-positions = <KEY_A KEY_R KEY_T KEY_O>; bindings = <&kp TAB>; };
	combo_space           { timeout-ms = <TIME_4>; key-positions = <KEY_E KEY_Y KEY_I KEY_O>; bindings = <&kp SPACE>; };
	combo_shift           { timeout-ms = <TIME_4>; key-positions = <KEY_E KEY_R KEY_T KEY_S>; bindings = <&sk LSHFT>; };
	combo_layer_bt_select { timeout-ms = <TIME_4>; key-positions = <KEY_A KEY_E KEY_S KEY_O>; bindings = <&tog L_BT>; };
	combo_bt_clr          { timeout-ms = <TIME_4>; key-positions = <KEY_R KEY_Y KEY_T KEY_I>; bindings = <&bt BT_CLR>; };
	combo_func            { timeout-ms = <TIME_4>; key-positions = <KEY_A KEY_E KEY_T KEY_I>; bindings = <&sl 7>; };

	combo_z         { layers = <L_BA>; timeout-ms = <TIME_4>; key-positions = <KEY_A KEY_R KEY_T KEY_S>; bindings = <&kp Z>; };
	combo_caps_lock { layers = <L_BA>; timeout-ms = <TIME_4>; key-positions = <KEY_O KEY_I KEY_Y KEY_A>; bindings = <&kp CAPS>; };
	

		/*****************************************
		 * Right combos
		 *****************************************/
	c_gui        { timeout-ms = <TIME_2>; key-positions = <9 3>; bindings = <&sk LGUI>; };
	combo_bkspc  { timeout-ms = <TIME_2>; key-positions = <3  11>; bindings = <&kp LC(BACKSPACE)>; };
	combo_dot    { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <1 11>; bindings = <&kp PERIOD>; };
	combo_accent { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <1 9>; bindings = <&kp LBKT>; };
	c_m	     { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <2 3>; bindings = <&kp M>; };
	c_b	     { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <10 11>; bindings = <&kp B>; };
	c_b2	     { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <8 11>; bindings = <&kp B>; };
	c_v	     { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <9 10>; bindings = <&kp V>; };
	c_h	     { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <1 2>; bindings = <&kp H>; };
	c_w	     { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <0 3>; bindings = <&kp W>; };
	c_y	     { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <1 3>; bindings = <&kp Y>; };
	c_p	     { layers = <L_BA>; timeout-ms = <TIME_2>; key-positions = <9 11>; bindings = <&kp P>; };


		/*****************************************
		 * Left!Right combos
		 *****************************************/
	c_enter      { timeout-ms = <TIME_2>; key-positions = <3 4>; bindings = <&kp ENTER>; };

	};
};

/ {
    behaviors {
        space_mod: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&lt 7 SPC>, <&kp SPC>;
        };
    };
/*
/ {
	behaviors {
		layer_base_kp: layer_base_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_base_kp"; 
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred"; 
						bindings = <&mo>, <&kp>; };
		layer_numbers_kp: layer_numbers_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_numbers_kp"; 
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred"; 
						bindings = <&mo>, <&kp>; };
		layer_symbols_kp: layer_symbols_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_symbols_kp"; 
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred"; 
						bindings = <&mo>, <&kp>; };
		layer_parentheticals_kp: layer_parentheticals_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_parentheticals_kp";
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred";
						bindings = <&mo>, <&kp>; };
		layer_custom_kp: layer_custom_kp { compatible = "zmk,behavior-hold-tap"; label = "layer_custom_kp";
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred";
						bindings = <&mo>, <&kp>; };
		ctrl_alt_kp: ctrl_alt_kp { compatible = "zmk,behavior-hold-tap"; label = "ctrl_alt_kp";
						#binding-cells = <2>; tapping_term_ms = <TIMEOUT_LAYER_HOLD>; flavor = "tap-preferred";
						bindings = <&sk>, <&sk>; };
	};
};
*/

// 	0	1	2	3		4	5	6	7
//	8	9 	10	11		12 	13	14	15	

// / {
       keymap {
                compatible = "zmk,keymap";
                
       		base {
		label = "ARDUX";
		bindings = <
//qQ@       lLł    fFđ    nN”       aAæ         tr¶    tTŧ    kKĸ
&lt L_NA Q  &kp L  &kp F  &kp N		&lt L_PA A  &kp R  &kp T  &lt L_NU J
//sSß       xX»    cC¢    dDð       eE€         uU↓    iI→    oOø
&lt L_NA S  &kp X  &kp C  &kp D		&lt L_SY E  &kp U  &kp I  &lt L_CU O
		>;
		};
		
		numbers {
		label = "Number";
		bindings = <
//+_~    -_̣       **¯ā         //⅞                      1!|      2"@     3#·     
&kp RBKT &kp FSLH &kp LS(RBKT) &kp LS(N7)		        &kp N1   &kp N2  &kp N3  &mo L_NU
//7/{    8([      9)]          <>\                      4$~      5%½     6&½     .:·
&kp N7   &kp N8   &kp N9       &kp NON_US_BSLH 	    	&kp N4   &kp N5  &kp N6  &kp DOT
		>;
		};

		symbols {
		label = "Symbol";
		bindings = <
//|°¬      ??¿        ¿¡         !!¡                    !!¡       }]        ñÑ~      |°¬
&kp GRAVE  &kp UNDER  &kp EQUAL  &kp LS(N1)           	&kp EXCL  &kp BSLH  &kp SEMI  &kp GRAVE
//(™        )±        ¿¡          ¡                               __        '?\       ¿¡
&kp LS(N8) &kp LS(N9) &kp EQUAL  &kp LS(EQUAL)	        &mo L_SY  &kp QMARK &kp MINUS &kp EQUAL

		>;
		};
		parentheticals {
		label = "Paren";
		bindings = <
//}]         __           ¿              {{{[[                       ´          ?          ¨
&kp BSLH   &kp QMARK     &kp EQUAL     &kp SQT	    	&mo L_PA &kp LBKT  &kp UNDER  &kp LBRC
//   (         ¡         #£               }}]]                    .:·      ´      !         )
&kp LS(N8) &kp LS(EQUAL) &kp LS(EQUAL) &kp BSLH         &kp DOT  &kp LBKT   &kp EXCL   &kp LS(N9)
		>;
		};
		navigation {
		label = "Nav";
		bindings = <
&kp HOME  &kp UP    &kp END   &kp PG_UP			&kp HOME  &kp UP    &kp END   &kp PG_UP
&kp LEFT  &kp DOWN  &kp RIGHT &kp PG_DN			&kp LEFT  &kp DOWN  &kp RIGHT &kp PG_DN
		>;
		};

		bt {
		bindings = <
&bt BT_PRV  &bt BT_NXT	&trans 	&trans		 	&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_NXT &bt BT_PRV	
&bootloader &bt BT_CLR	&trans 	&trans 			&bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR &bootloader  	
		>;
		};

		custom {
		label = "Custom";
		bindings = <
&kp C_MUTE &kp INS   &kp C_VOL_UP 	 &none 	   &kp C_MUTE &kp INS   &kp C_VOL_UP  &none
&sk RSHFT  &kp PSCRN &kp C_VOL_DN 	 &mo L_CU &sk RSHFT  &kp PSCRN &kp C_VOL_DN  &mo L_CU 
		>;
		};

		function {
		label = "func";
		bindings = <
&kp F9  &kp F10  &kp F11 &kp F12		                 &kp F1  &kp F2  &kp F3 &kp F4
&kp F13  &kp F14  &kp F15 &kp F16		                 &kp F5  &kp F6  &kp F7 &kp F8
		>;
		};

		random {
		label = "func";
		bindings = <
&kp LG(Q)  &kp LG(N1)  &kp LG(N2) &kp LG(N3)	        &mo 7  &kp LG(N7)  &kp LG(N8) &kp LG(N9)
&kp LSHFT  &kp LG(N4)  &kp LG(N5) &kp LG(N6)            &mo 7  &kp LG(N4)  &kp LG(N5) &kp LG(N6)
		>;
		};
	};
};
